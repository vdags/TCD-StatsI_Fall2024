1+2
a<-2
a
install.packages("FactoMineR")
install.packages("pda")
install.packages("arules")
1
1+1
ls
Nile
help(Nile)
mean(Nile)
plot(Nile)
hist(Nile)
ls()
x<-5
x
ls()
x<-c(1,1)
x
sum(y)
#list current variables
ls()
# Native dataset
Nile
mean(Nile)
help(Nile) # information
plot(Nile)
hist(Nile)
#Assignment
x<-5
y<-c(1,2,3,4,5)
y[2:4]
sum(y)
sqrt(4)
ls()
rm(list=ls())
ls()
in R
x<-"test"
class(x)
length(x)
# create a list with required components
movieList <- list(name = "Iron man", leadActor = "Robert Downey Jr")
# give a name to your class
class(movieList) <- "movie"
movieList
x<-rnorm(n=50)
plot(x)
mean(x)
std(x)
sd(x)
lm(x)
lm(y~x)
y<-2*x
lm(y~x)
# Create datasets
x<-rnorm(n=50,mean=0)
plot(x)
mean(x)
sd(x)
y<-2*x
# linear regression
xylm<-lm(y~x)
summary(x)
summary(y)
summary(xylm)
plot(xylm)
plot(xylm)
plot(x,y)
xylm$residuals
#loops
x<-vector("double",10)
for(i in 1:10){
x[i]<-i
}
print(x)
rep(1,10)
seq(1:10)
help(seq())
help(seq)
seq(1:10,by=2)
seq(1:10,2)
seq(from=1,to=10,by=2)
install.packages('devtools')
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
package:IRkernel
install.packages("IRkernel")
install.packages("IRkernel")
install.packages("Rtools")
install.packages("IRkernel")
install.packages("IRkernel")
install.packages("IRkernel")
1+1
install.packages("IRkernel")
install.packages("IRkernel")
install.packages('devtools')
devtools::install_github('IRkernel/IRkernel')
find_rtools(T)
install.packages("IRkernel")
file.path(R.home(), "bin/x64")
list.files()
install.packages("IRkernel")
install.packages('devtools')
pkgbuild::find_rtools()
Sys.getenv("PATH")
library(rtools)
install.packages('devtools')
#####################
# load libraries
setwd("C:/data/ecole/___TCD/Michaelmas_Term/stats_I/TCD-StatsI_Fall2024/problemSets/PS01/my_answers")
# clear global .environment
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c("ggplot2", "stargazer"),  pkgTest)
# set working directory to current parent folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#####################
# Problem 1
#####################
# load data as vector
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
# capture the number of observations
n <- length(y)
## Question 1
sgm <-sd(y) # Calculate empirical standard deviation
mu <- mean(y) # calculate empirical mean
# Assuming y values follow a normal law, we obtain the following confidence interval CI:
CI <- c(qnorm(0.05,mean=mu,sd=sgm),qnorm(0.95,mean=mu,sd=sgm))
CI
## Question 2
# Hypothesis H0 is: "Average student IQ is lower or equal than the average IQ score among all the schools int he country."
# The test is done for an alpha-risk of 5%
# I.e. H0 := {mean_general >= mean_students}
alpha<-0.05
# The test statistic is the mean.
ycr<-(y-mu)/sgm
test<-t.test(y, mu=0, alternative = 'greater')
test$p.value
#H0 is not rejected.
#CI95 <- c(qnorm(0.025,mean=mu,sd=sgm),qnorm(0.975,mean=mu,sd=sgm))
#####################
# Problem 2
#####################
# read in expenditure data
expenditure <- read.table("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2024/main/datasets/expenditure.txt", header=T)
#Question 1
#Create pairs plot and save it in a pdf file.
pdf("pairs.pdf")
pairs(expenditure[,2:5])
dev.off()
#Question 2
pdf("regions.pdf")
plot(expenditure$Region,expenditure$Y)
dev.off()
# Question3 3
# create scatterplot of Y and X1
pdf("X1.pdf")
plot(expenditure$X1, expenditure$Y)
dev.off()
png(file="YX1Region.png")
plot(expenditure$X1,
expenditure$Y,
col=expenditure$Region,
pch=expenditure$Region,
xlab="per capita personal income in state ($/pers)",
ylab="per capita expenditure on shelters/housing assistance in state ($/pers)",
main="Relationship between shelters/housing assistance and personal income")
# Add legend
legend(1000, 130, # x and y position of legend
legend=c("Northeast", "North Central", "South", "West"),
col= as.integer(names(table(expenditure$Region))),
pch= as.integer(names(table(expenditure$Region))))
dev.off()
# run an example regression, to show how to save table
regression1 <- lm(Y~X1, data=expenditure)
# now save that output to a file that you can read in later to your answers
# make it easier for when we need to do this again, let's create a function
output_stargazer <- function(outputFile, ...) {
output <- capture.output(stargazer(...))
cat(paste(output, collapse = "\n"), "\n", file=outputFile, append=TRUE)
}
# execute function and check ls() to make sure it worked
output_stargazer("regression_output1.tex", regression1)
# The test statistic is the mean.
ycr<-(y-mu)/sgm
test<-t.test(ycr, mu=0, alternative = 'greater')
test$p.value
test<-t.test(y, mu=100, alternative = 'greater')
test$p.value
test
test_sd<-t.test(ycr, mu=0, alternative = 'greater')
test_sd$p.value
test_sd
-0.3421764*sgm+mu
# load data as vector
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
# capture the number of observations
n <- length(y)
n
# read in expenditure data
expenditure <- read.table("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2024/main/datasets/expenditure.txt", header=T)
#Question 1
#Create pairs plot and save it in a pdf file.
pdf("pairs.pdf")
dev.off()
pdf("regions.pdf")
plot(expenditure$Region,expenditure$Y)
dev.off()
# create scatterplot of Y and X1
pdf("X1.pdf")
plot(expenditure$X1, expenditure$Y)
dev.off()
#####################
# load libraries
PATH<-"C:/data/ecole/___TCD/Michaelmas_Term/stats_I/TCD-StatsI_Fall2024/problemSets/PS01/my_answers"
setwd(PATH)
summarise(y)
summarize(y)
sumarize(y)
sumarise(y)
summary(y)
# load data as vector
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
summary(y)
# capture the number of observations
n <- length(y)
sgm <-sd(y) # Calculate empirical standard deviation
mu <- mean(y) # calculate empirical mean
CI <- c(qnorm(0.05,mean=mu,sd=sgm),qnorm(0.95,mean=mu,sd=sgm))
CI
tscore<-qt(0.95,df=n-1)
tscore
CI <- c(qt(0.05,mean=mu,sd=sgm/sqrt(n-1),df=n-1),qnorm(0.95,mean=mu,sd=sgm/sqrt(n-1),df=n-1))
CI <- c(qt(0.05,df=n-1),qt(0.95,df=n-1))
CI
CI <- CI_standard*sgm/sqrt(n-1) + mu
CI_standart <- c(qt(0.05,df=n-1),qt(0.95,df=n-1))
CI <- CI_standard*sgm/sqrt(n-1) + mu
CI_standard <- c(qt(0.05,df=n-1),qt(0.95,df=n-1))
CI <- CI_standard*sgm/sqrt(n-1) + mu
CI
n
CI_standard <- c(qt(0.025,df=n-1),qt(0.975,df=n-1))
CI <- CI_standard*sgm/sqrt(n-1) + mu
CI
#tscore<-qt(0.95,df=n-1)
alpha <-0.05
CI_standard <- c(qt(alpha/2,df=n-1),qt(1-alpha/2,df=n-1))
CI <- CI_standard*sgm/sqrt(n-1) + mu
CI
#tscore<-qt(0.95,df=n-1)
alpha <-0.01
CI_standard <- c(qt(alpha/2,df=n-1),qt(1-alpha/2,df=n-1))
CI <- CI_standard*sgm/sqrt(n-1) + mu
CI
#tscore<-qt(0.95,df=n-1)
alpha <-0.1
CI_standard <- c(qt(alpha/2,df=n-1),qt(1-alpha/2,df=n-1))
CI <- CI_standard*sgm/sqrt(n-1) + mu
CI
tscore<-qt(0.95,df=n-1)
CI_I<- c(mu  tscore*sgm/sqrt(n-1),mu + tscore*sgm/sqrt(n-1))
CI_I<- c(mu - tscore*sgm/sqrt(n-1),mu + tscore*sgm/sqrt(n-1))
CI_I
alpha <-0.1
CI_standard <- c(qt(alpha/2,df=n-1),qt(1-alpha/2,df=n-1))
CI <- CI_standard*sgm/sqrt(n) + mu
CI
alpha<-0.05
# The test statistic is the mean.
test<-t.test(y, mu=100, alternative = 'greater')
test$p.value
test
# run an example regression, to show how to save table
regression1 <- lm(Y~X1, data=expenditure)
pdf("regions.pdf")
plot(expenditure$Region,expenditure$Y)
boxplot(expenditure$Region,expenditure$Y)
plot(expenditure$X1 ~ expenditure$Y)
boxplot(expenditure$Region ~ expenditure$Y)
boxplot(expenditure$Y ~ expenditure$Region)
plot(expenditure$Region,expenditure$Y)
summary(y)
n <- length(y)
## Question 1
sgm <-sd(y) # Calculate empirical standard deviation
mu <- mean(y) # calculate empirical mean
# Assuming y values follow a student law, we obtain the following confidence interval CI at 90% of confidence:
alpha <-0.1
CI_standard <- c(qt(alpha/2,df=n-1),qt(1-alpha/2,df=n-1))
CI <- CI_standard*sgm/sqrt(n) + mu
CI
ycr<-(y-mu)/sgm
test_sd<-t.test(ycr, mu=0, alternative = 'greater')
test_sd$p.value
test<-t.test(y, mu=100, alternative = 'greater')
test$p.value
test
alpha<-0.05
test<-t.test(y, mu=100, alternative = 'greater',conf.level = 1-alpha)
test$p.value
alpha<-0.05
test<-t.test(y, mu=100, alternative = 'greater',conf.level = 1-alpha)
test
test$p.value
plot(expenditure$Region,expenditure$Y)
###############################################
#        ADD values
##############################################
pdf("regions_boxplot.pdf")
boxplot(expenditure$Y ~ expenditure$Region)
dev.off()
pdf("YX1Region.pdf")
plot(expenditure$X1,
expenditure$Y,
col=expenditure$Region,
pch=expenditure$Region,
xlab="per capita personal income in state ($/pers)",
ylab="per capita expenditure on shelters/housing assistance in state ($/pers)",
main="Relationship between shelters/housing assistance and personal income")
# Add legend
legend(1000, 130, # x and y position of legend
legend=c("Northeast", "North Central", "South", "West"),
col= as.integer(names(table(expenditure$Region))),
pch= as.integer(names(table(expenditure$Region))))
dev.off()
